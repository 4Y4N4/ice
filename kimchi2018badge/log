yosys '-p synth_ice40 -top top -blif dotmatrix.blif' dotmatrix.v matrixdrv.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 UNKNOWN, gcc 8.0.1 -fPIC -Os)


-- Parsing `dotmatrix.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `dotmatrix.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

-- Parsing `matrixdrv.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `matrixdrv.v' to AST representation.
Generating RTLIL representation for module `\matrixdrv'.
Successfully finished Verilog frontend.

-- Running command ` synth_ice40 -top top -blif dotmatrix.blif' --

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \matrixdrv

3.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \matrixdrv
Removed 0 unused modules.
Mapping positional arguments of cell top.matdrv (matrixdrv).

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3.3. Executing PROC_INIT pass (extract init attributes).

3.3.4. Executing PROC_ARST pass (detect async resets in processes).

3.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\matrixdrv.$proc$matrixdrv.v:81$12'.
     1/1: $1\address[3:0]
Creating decoders for process `\matrixdrv.$proc$matrixdrv.v:24$6'.
     1/8: $0\outputen[0:0]
     2/8: $0\latch[0:0]
     3/8: $0\matclk[0:0]
     4/8: $0\address[3:0]
     5/8: $0\b[1:0]
     6/8: $0\g[1:0]
     7/8: $0\r[1:0]
     8/8: $0\clkcnt[5:0]
Creating decoders for process `\top.$proc$dotmatrix.v:27$1'.
     1/2: $0\clkcnt[3:0]
     2/2: $0\clkline[0:0]

3.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\matrixdrv.\address' using process `\matrixdrv.$proc$matrixdrv.v:81$12'.
  created $dff cell `$procdff$69' with negative edge clock.
Creating register for signal `\matrixdrv.\clkcnt' using process `\matrixdrv.$proc$matrixdrv.v:24$6'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\matrixdrv.\r' using process `\matrixdrv.$proc$matrixdrv.v:24$6'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\matrixdrv.\g' using process `\matrixdrv.$proc$matrixdrv.v:24$6'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\matrixdrv.\b' using process `\matrixdrv.$proc$matrixdrv.v:24$6'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\matrixdrv.\address' using process `\matrixdrv.$proc$matrixdrv.v:24$6'.
  created $dff cell `$procdff$74' with positive edge clock.
Creating register for signal `\matrixdrv.\matclk' using process `\matrixdrv.$proc$matrixdrv.v:24$6'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\matrixdrv.\latch' using process `\matrixdrv.$proc$matrixdrv.v:24$6'.
  created $dff cell `$procdff$76' with positive edge clock.
Creating register for signal `\matrixdrv.\outputen' using process `\matrixdrv.$proc$matrixdrv.v:24$6'.
  created $dff cell `$procdff$77' with positive edge clock.
Creating register for signal `\top.\clkline' using process `\top.$proc$dotmatrix.v:27$1'.
  created $dff cell `$procdff$78' with positive edge clock.
Creating register for signal `\top.\clkcnt' using process `\top.$proc$dotmatrix.v:27$1'.
  created $dff cell `$procdff$79' with positive edge clock.

3.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\matrixdrv.$proc$matrixdrv.v:81$12'.
Removing empty process `matrixdrv.$proc$matrixdrv.v:81$12'.
Found and cleaned up 5 empty switches in `\matrixdrv.$proc$matrixdrv.v:24$6'.
Removing empty process `matrixdrv.$proc$matrixdrv.v:24$6'.
Found and cleaned up 1 empty switch in `\top.$proc$dotmatrix.v:27$1'.
Removing empty process `top.$proc$dotmatrix.v:27$1'.
Cleaned up 7 empty switches.

3.4. Executing FLATTEN pass (flatten design).
Mapping top.matdrv using matrixdrv.
No more expansions possible.
Deleting now unused module matrixdrv.

3.5. Executing TRIBUF pass.

3.6. Executing DEMINOUT pass (demote inout ports to input or output).

3.7. Executing SYNTH pass.

3.7.1. Executing PROC pass (convert processes to netlists).

3.7.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.7.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.7.1.3. Executing PROC_INIT pass (extract init attributes).

3.7.1.4. Executing PROC_ARST pass (detect async resets in processes).

3.7.1.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.7.1.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.7.1.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.7.1.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.7.2. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$61' in module `top'.
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$55' in module `top'.
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$52' in module `top'.
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$49' in module `top'.
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$46' in module `top'.
Replacing $eq cell `$techmap\matdrv.$eq$matrixdrv.v:44$9' in module `top' with inverter.
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$43' in module `top'.
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$34' in module `top'.
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$25' in module `top'.
Replacing $shr cell `$techmap\matdrv.$shr$matrixdrv.v:22$5' (B=1, SHR=1) in module `top' with fixed wiring: { 1'0 \matdrv.clkcnt [5:1] }
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$38' in module `top'.

3.7.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
  removing unused `$not' cell `$techmap\matdrv.$eq$matrixdrv.v:44$9'.
  removing unused `$logic_not' cell `$techmap\matdrv.$logic_not$matrixdrv.v:26$7'.
  removing unused non-port wire \pixelbitoff.
  removed 1 unused temporary wires.

3.7.4. Executing CHECK pass (checking for obvious problems).
checking module top..
Warning: multiple conflicting drivers for top.\matdrv.address [3]:
    port Q[3] of cell $techmap\matdrv.$procdff$69 ($dff)
    port Q[3] of cell $techmap\matdrv.$procdff$74 ($dff)
Warning: multiple conflicting drivers for top.\matdrv.address [2]:
    port Q[2] of cell $techmap\matdrv.$procdff$69 ($dff)
    port Q[2] of cell $techmap\matdrv.$procdff$74 ($dff)
Warning: multiple conflicting drivers for top.\matdrv.address [1]:
    port Q[1] of cell $techmap\matdrv.$procdff$69 ($dff)
    port Q[1] of cell $techmap\matdrv.$procdff$74 ($dff)
Warning: multiple conflicting drivers for top.\matdrv.address [0]:
    port Q[0] of cell $techmap\matdrv.$procdff$69 ($dff)
    port Q[0] of cell $techmap\matdrv.$procdff$74 ($dff)
found and reported 4 problems.

3.7.5. Executing OPT pass (performing simple optimizations).

3.7.5.1. Executing OPT_EXPR pass (perform const folding).

3.7.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.7.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$64 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$16 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$25 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$34 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$43 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$46 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$49 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$52 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$55 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$61 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.7.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.7.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
  Cell `$techmap\matdrv.$procmux$28' is identical to cell `$techmap\matdrv.$procmux$19'.
    Redirecting output \Y: $techmap\matdrv.$procmux$28_Y = $techmap\matdrv.$procmux$19_Y
    Removing $mux cell `$techmap\matdrv.$procmux$28' from module `\top'.
  Cell `$techmap\matdrv.$procmux$31' is identical to cell `$techmap\matdrv.$procmux$22'.
    Redirecting output \Y: $techmap\matdrv.$procmux$31_Y = $techmap\matdrv.$procmux$22_Y
    Removing $mux cell `$techmap\matdrv.$procmux$31' from module `\top'.
  Cell `$techmap\matdrv.$procmux$34' is identical to cell `$techmap\matdrv.$procmux$25'.
    Redirecting output \Y: $techmap\matdrv.$0\latch[0:0] = $techmap\matdrv.$0\outputen[0:0]
    Removing $mux cell `$techmap\matdrv.$procmux$34' from module `\top'.
  Cell `$techmap\matdrv.$procmux$38' is identical to cell `$techmap\matdrv.$procmux$19'.
    Redirecting output \Y: $techmap\matdrv.$procmux$38_Y = $techmap\matdrv.$procmux$19_Y
    Removing $mux cell `$techmap\matdrv.$procmux$38' from module `\top'.
  Cell `$techmap\matdrv.$procdff$77' is identical to cell `$techmap\matdrv.$procdff$76'.
    Redirecting output \Q: \matdrv.outputen = \matdrv.latch
    Removing $dff cell `$techmap\matdrv.$procdff$77' from module `\top'.
Removed a total of 5 cells.

3.7.5.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\matdrv.$procdff$71 ($dff) from module top.
Removing $techmap\matdrv.$procdff$72 ($dff) from module top.
Removing $techmap\matdrv.$procdff$73 ($dff) from module top.
Removing $techmap\matdrv.$procdff$74 ($dff) from module top.
Replaced 4 DFF cells.

3.7.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
  removing unused `$dff' cell `$techmap\matdrv.$procdff$69'.
  removing unused `$mux' cell `$techmap\matdrv.$procmux$55'.
  removing unused `$mux' cell `$techmap\matdrv.$procmux$52'.
  removing unused `$mux' cell `$techmap\matdrv.$procmux$49'.
  removing unused `$mux' cell `$techmap\matdrv.$procmux$46'.
  removing unused `$mux' cell `$techmap\matdrv.$procmux$16'.
  removing unused `$add' cell `$techmap\matdrv.$add$matrixdrv.v:85$14'.
  removing unused `$eq' cell `$techmap\matdrv.$eq$matrixdrv.v:83$13'.
  removing unused non-port wire \mat_b.
  removing unused non-port wire \mat_g.
  removing unused non-port wire \mat_r.
  removing unused non-port wire \mat_row.
  removing unused non-port wire \matdrv.address.
  removing unused non-port wire \matdrv.b.
  removing unused non-port wire \matdrv.g.
  removing unused non-port wire \matdrv.mat_b.
  removing unused non-port wire \matdrv.mat_g.
  removing unused non-port wire \matdrv.mat_r.
  removing unused non-port wire \matdrv.mat_row.
  removing unused non-port wire \matdrv.r.
  removed 12 unused temporary wires.

3.7.5.8. Executing OPT_EXPR pass (perform const folding).

3.7.5.9. Rerunning OPT passes. (Maybe there is more to do..)

3.7.5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$64 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$19
    Root of a mux tree: $techmap\matdrv.$procmux$25 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$43 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$61 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.7.5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.7.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.7.5.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.7.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.7.5.15. Executing OPT_EXPR pass (perform const folding).

3.7.5.16. Finished OPT passes. (There is nothing left to do.)

3.7.6. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$add$dotmatrix.v:29$2 ($add).
Removed top 28 bits (of 32) from port Y of cell top.$add$dotmatrix.v:29$2 ($add).
Removed top 31 bits (of 32) from port B of cell top.$techmap\matdrv.$add$matrixdrv.v:72$11 ($add).
Removed top 26 bits (of 32) from port Y of cell top.$techmap\matdrv.$add$matrixdrv.v:72$11 ($add).
Removed top 28 bits (of 32) from port B of cell top.$techmap\matdrv.$le$matrixdrv.v:70$10 ($le).
Removed top 28 bits (of 32) from port B of cell top.$techmap\matdrv.$lt$matrixdrv.v:42$8 ($lt).
Removed top 28 bits (of 32) from wire top.$add$dotmatrix.v:29$2_Y.

3.7.7. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$dotmatrix.v:29$2 ($add).
  creating $macc model for $techmap\matdrv.$add$matrixdrv.v:72$11 ($add).
  creating $alu model for $macc $techmap\matdrv.$add$matrixdrv.v:72$11.
  creating $alu model for $macc $add$dotmatrix.v:29$2.
  creating $alu model for $techmap\matdrv.$le$matrixdrv.v:70$10 ($le): new $alu
  creating $alu model for $techmap\matdrv.$lt$matrixdrv.v:42$8 ($lt): new $alu
  creating $alu cell for $techmap\matdrv.$lt$matrixdrv.v:42$8: $auto$alumacc.cc:470:replace_alu$83
  creating $alu cell for $techmap\matdrv.$le$matrixdrv.v:70$10: $auto$alumacc.cc:470:replace_alu$94
  creating $alu cell for $add$dotmatrix.v:29$2: $auto$alumacc.cc:470:replace_alu$107
  creating $alu cell for $techmap\matdrv.$add$matrixdrv.v:72$11: $auto$alumacc.cc:470:replace_alu$110
  created 4 $alu and 0 $macc cells.

3.7.8. Executing SHARE pass (SAT-based resource sharing).

3.7.9. Executing OPT pass (performing simple optimizations).

3.7.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$40' in module `top'.
Optimizing away select inverter for $mux cell `$techmap\matdrv.$procmux$22' in module `top'.

3.7.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.7.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$64 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$19
    Root of a mux tree: $techmap\matdrv.$procmux$25 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$43 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$61 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.7.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$alumacc.cc:502:replace_alu$105: { $auto$rtlil.cc:1600:Not$104 $auto$rtlil.cc:1603:ReduceAnd$98 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$86: { $auto$alumacc.cc:483:replace_alu$84 [0] $auto$alumacc.cc:483:replace_alu$84 [1] $auto$alumacc.cc:483:replace_alu$84 [2] $auto$alumacc.cc:483:replace_alu$84 [3] $auto$alumacc.cc:483:replace_alu$84 [4] $auto$alumacc.cc:483:replace_alu$84 [5] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$97: { $auto$alumacc.cc:483:replace_alu$95 [0] $auto$alumacc.cc:483:replace_alu$95 [1] $auto$alumacc.cc:483:replace_alu$95 [2] $auto$alumacc.cc:483:replace_alu$95 [3] $auto$alumacc.cc:483:replace_alu$95 [4] $auto$alumacc.cc:483:replace_alu$95 [5] }
  Optimizing cells in module \top.
Performed a total of 3 changes.

3.7.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.7.9.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.7.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
  removing unused `$not' cell `$auto$alumacc.cc:58:get_gt$92'.

3.7.9.8. Executing OPT_EXPR pass (perform const folding).

3.7.9.9. Rerunning OPT passes. (Maybe there is more to do..)

3.7.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$64 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$19
    Root of a mux tree: $techmap\matdrv.$procmux$25 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$43 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$61 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.7.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.7.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.7.9.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.7.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.7.9.15. Executing OPT_EXPR pass (perform const folding).

3.7.9.16. Finished OPT passes. (There is nothing left to do.)

3.7.10. Executing FSM pass (extract and optimize FSM).

3.7.10.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.7.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.7.11. Executing OPT pass (performing simple optimizations).

3.7.11.1. Executing OPT_EXPR pass (perform const folding).

3.7.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.7.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.7.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.7.11.5. Finished fast OPT passes.

3.7.12. Executing MEMORY pass.

3.7.12.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.7.12.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.7.12.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.7.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.7.12.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.7.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.8. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.9. Executing TECHMAP pass (map to technology primitives).

3.9.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.
No more expansions possible.

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$techmap\matdrv.$procmux$19' (mux_sel01) in module `\top' with constant driver `$techmap\matdrv.$procmux$19_Y = \matdrv.clkcnt [0]'.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.10.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.10.5. Finished fast OPT passes.

3.11. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$64 (pure)
    Root of a mux tree: $procmux$67 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$25 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$43 (pure)
    Root of a mux tree: $techmap\matdrv.$procmux$61 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

3.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.12.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.12.8. Executing OPT_EXPR pass (perform const folding).

3.12.9. Finished OPT passes. (There is nothing left to do.)

3.13. Executing TECHMAP pass (map to technology primitives).

3.13.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.13.2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.
Mapping top.$auto$alumacc.cc:502:replace_alu$105 ($reduce_or) with simplemap.
Mapping top.$auto$alumacc.cc:58:get_gt$103 ($not) with simplemap.
Mapping top.$eq$dotmatrix.v:30$3 ($eq) with simplemap.
Mapping top.$not$dotmatrix.v:32$4 ($not) with simplemap.
Mapping top.$procmux$64 ($mux) with simplemap.
Mapping top.$procmux$67 ($mux) with simplemap.
Mapping top.$procdff$78 ($dff) with simplemap.
Mapping top.$procdff$79 ($dff) with simplemap.
Mapping top.$auto$alumacc.cc:58:get_gt$101 ($or) with simplemap.
Mapping top.$auto$alumacc.cc:78:get_cf$99 ($not) with simplemap.
Mapping top.$auto$alumacc.cc:64:get_eq$97 ($reduce_and) with simplemap.

3.13.3. Executing AST frontend in derive mode using pre-parsed AST for module `\_80_ice40_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 6
Parameter \Y_WIDTH = 6
Generating RTLIL representation for module `$paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=6\Y_WIDTH=6'.

3.13.4. Continuing TECHMAP pass.
Mapping top.$auto$alumacc.cc:470:replace_alu$94 using $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=6\Y_WIDTH=6.

3.13.5. Executing AST frontend in derive mode using pre-parsed AST for module `\_80_ice40_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4'.

3.13.6. Continuing TECHMAP pass.
Mapping top.$auto$alumacc.cc:470:replace_alu$107 using $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4.

3.13.7. Executing AST frontend in derive mode using pre-parsed AST for module `\_80_ice40_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 6
Parameter \Y_WIDTH = 6
Generating RTLIL representation for module `$paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=6'.

3.13.8. Continuing TECHMAP pass.
Mapping top.$auto$alumacc.cc:470:replace_alu$110 using $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=6\Y_WIDTH=6.
Mapping top.$techmap\matdrv.$procdff$76 ($dff) with simplemap.
Mapping top.$techmap\matdrv.$procdff$75 ($dff) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$83 using $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=6\Y_WIDTH=6.
Mapping top.$techmap\matdrv.$procdff$70 ($dff) with simplemap.
Mapping top.$techmap\matdrv.$procmux$61 ($mux) with simplemap.
Mapping top.$techmap\matdrv.$procmux$58 ($mux) with simplemap.
Mapping top.$auto$alumacc.cc:64:get_eq$86 ($reduce_and) with simplemap.
Mapping top.$auto$alumacc.cc:78:get_cf$88 ($not) with simplemap.
Mapping top.$techmap\matdrv.$procmux$43 ($mux) with simplemap.
Mapping top.$techmap\matdrv.$procmux$40 ($mux) with simplemap.
Mapping top.$techmap\matdrv.$procmux$25 ($mux) with simplemap.
Mapping top.$techmap\matdrv.$procmux$22 ($mux) with simplemap.
Mapping top.$auto$alumacc.cc:58:get_gt$90 ($or) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$94.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204 ($xor) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$94.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203 ($mux) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202 ($not) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$94.B_conv ($pos) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$94.A_conv ($pos) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$107.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$207 ($xor) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$107.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$206 ($mux) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$107.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$205 ($not) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$107.B_conv ($pos) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$107.A_conv ($pos) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$110.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$210 ($xor) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$110.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$209 ($mux) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$110.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$208 ($not) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$110.B_conv ($pos) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$110.A_conv ($pos) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204 ($xor) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203 ($mux) with simplemap.
Mapping top.$techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202 ($not) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$83.B_conv ($pos) with simplemap.
Mapping top.$auto$alumacc.cc:470:replace_alu$83.A_conv ($pos) with simplemap.
No more expansions possible.

3.14. Executing ICE40_OPT pass (performing simple optimizations).

3.14.1. Running ICE40 specific optimizations.

3.14.2. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$251' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$245' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$252' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$246' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$255' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$249' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$256' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$250' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$253' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$254' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$94.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$168' (?0) in module `\top' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$166 [0] = \clkcnt [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$169' (?0) in module `\top' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$166 [1] = \clkcnt [1]'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$182' in module `top'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$183' in module `top'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$184' in module `top'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$185' in module `top'.
Optimizing away select inverter for $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$186' in module `top'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$303' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$297' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$304' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$298' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$301' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$295' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$302' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$299' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$293' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$300' (??1) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$203_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$267' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$107.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$206_Y [0] = \clkcnt [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$268' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$107.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$206_Y [1] = \clkcnt [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$264' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$107.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$207_Y [1] = \clkcnt [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$269' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$107.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$206_Y [2] = \clkcnt [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$265' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$107.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$207_Y [2] = \clkcnt [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$270' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$107.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$206_Y [3] = \clkcnt [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$266' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$107.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$207_Y [3] = \clkcnt [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$281' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$209_Y [0] = \matdrv.clkcnt [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$282' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$209_Y [1] = \matdrv.clkcnt [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$276' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$210_Y [1] = \matdrv.clkcnt [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$283' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$209_Y [2] = \matdrv.clkcnt [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$277' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$210_Y [2] = \matdrv.clkcnt [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$284' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$209_Y [3] = \matdrv.clkcnt [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$278' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$210_Y [3] = \matdrv.clkcnt [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$285' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$209_Y [4] = \matdrv.clkcnt [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$279' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$210_Y [4] = \matdrv.clkcnt [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$286' (??0) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$ternary$/usr/bin/../share/yosys/ice40/arith_map.v:42$209_Y [5] = \matdrv.clkcnt [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$280' (0?) in module `\top' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$110.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$210_Y [5] = \matdrv.clkcnt [5]'.

3.14.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$288' is identical to cell `$auto$simplemap.cc:37:simplemap_not$306'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$110.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$208_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$288' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$287' is identical to cell `$auto$simplemap.cc:37:simplemap_not$257'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$110.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$208_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$287' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$291' is identical to cell `$auto$simplemap.cc:37:simplemap_not$309'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$110.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$208_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [4]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$291' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$292' is identical to cell `$auto$simplemap.cc:37:simplemap_not$310'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$110.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$208_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [5]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$292' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$289' is identical to cell `$auto$simplemap.cc:37:simplemap_not$307'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$110.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$208_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [2]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$289' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$305' is identical to cell `$auto$simplemap.cc:37:simplemap_not$257'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$305' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$259' is identical to cell `$auto$simplemap.cc:37:simplemap_not$307'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [2]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$259' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$261' is identical to cell `$auto$simplemap.cc:37:simplemap_not$309'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [4]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$261' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$262' is identical to cell `$auto$simplemap.cc:37:simplemap_not$310'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [5]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$262' from module `\top'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$195' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$232'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$194 [0] = $auto$simplemap.cc:127:simplemap_reduce$231 [0]
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$195' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$258' is identical to cell `$auto$simplemap.cc:37:simplemap_not$306'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$258' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$308' is identical to cell `$auto$simplemap.cc:37:simplemap_not$290'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$83.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$110.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$208_Y [3]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$308' from module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$260' is identical to cell `$auto$simplemap.cc:37:simplemap_not$290'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$94.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$202_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$110.$not$/usr/bin/../share/yosys/ice40/arith_map.v:42$208_Y [3]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$260' from module `\top'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$296' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$248'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$83.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$94.$xor$/usr/bin/../share/yosys/ice40/arith_map.v:68$204_Y [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$296' from module `\top'.
Removed a total of 14 cells.

3.14.4. Executing OPT_RMDFF pass (remove dff with constant values).

3.14.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:206:simplemap_lognot$180'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$94.slice[5].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$94.slice[4].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$94.slice[3].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$94.slice[2].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$94.slice[1].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$94.slice[0].adder'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$107.slice[3].carry'.
  removing unused `\SB_CARRY' cell `$auto$alumacc.cc:470:replace_alu$110.slice[5].carry'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$83.slice[5].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$83.slice[4].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$83.slice[3].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$83.slice[2].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$83.slice[1].adder'.
  removing unused `\SB_LUT4' cell `$auto$alumacc.cc:470:replace_alu$83.slice[0].adder'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$263'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$271'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$272'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$273'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$274'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$275'.

3.14.6. Rerunning OPT passes. (Removed registers in this run.)

3.14.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell top.$auto$alumacc.cc:470:replace_alu$107.slice[0].carry: CO=\clkcnt [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:470:replace_alu$110.slice[0].carry: CO=\matdrv.clkcnt [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:470:replace_alu$83.slice[0].carry: CO=$auto$alumacc.cc:470:replace_alu$83.BB [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:470:replace_alu$94.slice[0].carry: CO=$auto$alumacc.cc:470:replace_alu$83.BB [0]
Mapping SB_LUT4 cell top.$auto$alumacc.cc:470:replace_alu$107.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:470:replace_alu$110.slice[1].adder back to logic.

3.14.8. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$319' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$311 [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$318' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$311 [6] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$324' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$320 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$317' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$311 [5] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$316' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$311 [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$323' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$320 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$315' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$311 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$314' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$311 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$322' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$320 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$313' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$311 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$312' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$311 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$321' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$320 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$326' (01?) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$325 [0] = \clkcnt [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$338' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$330 [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$337' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$330 [6] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$343' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$339 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$336' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$330 [5] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$335' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$330 [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$342' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$339 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$334' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$330 [3] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$333' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$330 [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$341' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$339 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$332' (100) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$330 [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$331' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$330 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$340' (010) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$339 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$345' (01?) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$344 [0] = \matdrv.clkcnt [1]'.

3.14.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
  Cell `$auto$simplemap.cc:37:simplemap_not$306' is identical to cell `$auto$simplemap.cc:311:simplemap_lut$346'.
    Redirecting output \Y: $auto$alumacc.cc:470:replace_alu$83.BB [1] = $auto$simplemap.cc:309:simplemap_lut$344 [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$306' from module `\top'.
Removed a total of 1 cells.

3.14.10. Executing OPT_RMDFF pass (remove dff with constant values).

3.14.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.14.12. Rerunning OPT passes. (Removed registers in this run.)

3.14.13. Running ICE40 specific optimizations.

3.14.14. Executing OPT_EXPR pass (perform const folding).

3.14.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.14.16. Executing OPT_RMDFF pass (remove dff with constant values).

3.14.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.14.18. Finished OPT passes. (There is nothing left to do.)

3.15. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

3.16. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$187 to $_DFFE_PP_ for $0\clkline[0:0] -> \clkline.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$189 to $_DFFE_PP_ for $0\clkcnt[3:0] [1] -> \clkcnt [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$214 to $_DFFE_PP_ for $techmap\matdrv.$0\clkcnt[5:0] [1] -> \matdrv.clkcnt [1].

3.17. Executing TECHMAP pass (map to technology primitives).

3.17.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$187 using \$_DFFE_PP_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$188 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$189 using \$_DFFE_PP_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$190 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$191 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$211 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$212 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$213 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$214 using \$_DFFE_PP_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$215 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$216 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$217 using \$_DFF_P_.
Mapping top.$auto$simplemap.cc:420:simplemap_dff$218 using \$_DFF_P_.
No more expansions possible.

3.18. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$329' (x??) in module `\top' with constant driver `$add$dotmatrix.v:29$2_Y [1] = $auto$simplemap.cc:309:simplemap_lut$325 [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$186' (?x?) in module `\top' with constant driver `$0\clkline[0:0] = $not$dotmatrix.v:32$4_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:311:simplemap_lut$348' (x??) in module `\top' with constant driver `$auto$simplemap.cc:309:simplemap_lut$347 = $auto$alumacc.cc:470:replace_alu$83.BB [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$359' (?0) in module `\top' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$357 [0] = \clkcnt [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$370' (?0) in module `\top' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$366 [2] = \matdrv.clkcnt [0]'.

3.19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

3.20. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.

3.21. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$224 (A=1'0, B=$techmap\matdrv.$procmux$58_Y [5], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$218 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$182 (A=1'0, B=$add$dotmatrix.v:29$2_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$172) into $auto$simplemap.cc:420:simplemap_dff$188 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$183 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$325 [1], S=$auto$simplemap.cc:256:simplemap_eqne$172) into $auto$simplemap.cc:420:simplemap_dff$189 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$184 (A=1'0, B=$add$dotmatrix.v:29$2_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$172) into $auto$simplemap.cc:420:simplemap_dff$190 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$185 (A=1'0, B=$add$dotmatrix.v:29$2_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$172) into $auto$simplemap.cc:420:simplemap_dff$191 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$242 (A=1'0, B=$techmap\matdrv.$procmux$22_Y, S=\rst) into $auto$simplemap.cc:420:simplemap_dff$211 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$240 (A=1'0, B=$techmap\matdrv.$procmux$40_Y, S=\rst) into $auto$simplemap.cc:420:simplemap_dff$212 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$219 (A=1'0, B=$techmap\matdrv.$procmux$58_Y [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$213 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$220 (A=1'0, B=$techmap\matdrv.$procmux$58_Y [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$214 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$221 (A=1'0, B=$techmap\matdrv.$procmux$58_Y [2], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$215 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$222 (A=1'0, B=$techmap\matdrv.$procmux$58_Y [3], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$216 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$223 (A=1'0, B=$techmap\matdrv.$procmux$58_Y [4], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$217 (SB_DFF).

3.22. Executing ICE40_OPT pass (performing simple optimizations).

3.22.1. Running ICE40 specific optimizations.

3.22.2. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$225' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$219' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$182' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$183' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$184' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$185' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$226' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$220' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$227' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$221' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$228' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$222' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$229' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$223' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$230' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$224' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$240' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$243' in module `top' with and-gate.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$242' in module `top' with and-gate.

3.22.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$419' is identical to cell `$auto$ice40_ffssr.cc:106:execute$421'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$420 = $auto$rtlil.cc:1731:NotGate$422
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$419' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$417' is identical to cell `$auto$ice40_ffssr.cc:106:execute$421'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$418 = $auto$rtlil.cc:1731:NotGate$422
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$417' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$415' is identical to cell `$auto$ice40_ffssr.cc:106:execute$421'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$416 = $auto$rtlil.cc:1731:NotGate$422
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$415' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$413' is identical to cell `$auto$ice40_ffssr.cc:106:execute$421'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$414 = $auto$rtlil.cc:1731:NotGate$422
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$413' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$411' is identical to cell `$auto$ice40_ffssr.cc:106:execute$421'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$412 = $auto$rtlil.cc:1731:NotGate$422
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$411' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$409' is identical to cell `$auto$ice40_ffssr.cc:106:execute$421'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$410 = $auto$rtlil.cc:1731:NotGate$422
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$409' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$405' is identical to cell `$auto$ice40_ffssr.cc:106:execute$407'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$406 = $auto$rtlil.cc:1731:NotGate$408
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$405' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$403' is identical to cell `$auto$ice40_ffssr.cc:106:execute$407'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$404 = $auto$rtlil.cc:1731:NotGate$408
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$403' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$401' is identical to cell `$auto$ice40_ffssr.cc:106:execute$407'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$402 = $auto$rtlil.cc:1731:NotGate$408
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$401' from module `\top'.
  Cell `$auto$ice40_ffssr.cc:106:execute$399' is identical to cell `$auto$ice40_ffssr.cc:106:execute$421'.
    Redirecting output \Y: $auto$rtlil.cc:1731:NotGate$400 = $auto$rtlil.cc:1731:NotGate$422
    Removing $_NOT_ cell `$auto$ice40_ffssr.cc:106:execute$399' from module `\top'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$353' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$360'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$351 = $auto$simplemap.cc:250:simplemap_eqne$357 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$353' from module `\top'.
Removed a total of 11 cells.

3.22.4. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$219'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$182'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$183'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$184'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$185'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$220'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$221'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$222'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$223'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$224'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$240'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:277:simplemap_mux$242'.

3.22.6. Rerunning OPT passes. (Removed registers in this run.)

3.22.7. Running ICE40 specific optimizations.

3.22.8. Executing OPT_EXPR pass (perform const folding).

3.22.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

3.22.10. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

3.22.12. Finished OPT passes. (There is nothing left to do.)

3.23. Executing TECHMAP pass (map to technology primitives).

3.23.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.
No more expansions possible.

3.24. Executing ABC pass (technology mapping using ABC).

3.24.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 47 gates and 68 wires to a netlist network with 19 inputs and 21 outputs.

3.24.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + dc2 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime -o 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs 
ABC: + lutpack 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.24.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       48
ABC RESULTS:        internal signals:       28
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       21
Removing temp directory.
Removed 0 unused cells and 45 unused wires.

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.25.2. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 1
Parameter \LUT = 2'01
Generating RTLIL representation for module `$paramod\$lut\WIDTH=1\LUT=2'01'.

3.25.3. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$440 using $paramod\$lut\WIDTH=1\LUT=2'01.

3.25.4. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 3
Parameter \LUT = 8'01000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=3\LUT=8'01000000'.

3.25.5. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$431 using $paramod\$lut\WIDTH=3\LUT=8'01000000.

3.25.6. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 3
Parameter \LUT = 8'00000001
Generating RTLIL representation for module `$paramod\$lut\WIDTH=3\LUT=8'00000001'.

3.25.7. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$430 using $paramod\$lut\WIDTH=3\LUT=8'00000001.

3.25.8. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'1111100000000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'1111100000000000'.

3.25.9. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$435 using $paramod\$lut\WIDTH=4\LUT=16'1111100000000000.

3.25.10. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'0001000000000000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'0001000000000000'.

3.25.11. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$427 using $paramod\$lut\WIDTH=4\LUT=16'0001000000000000.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$441 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$442 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$443 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$444 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$436 using $paramod\$lut\WIDTH=4\LUT=16'1111100000000000.

3.25.12. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'0100
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'0100'.

3.25.13. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$432 using $paramod\$lut\WIDTH=2\LUT=4'0100.

3.25.14. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'0000011111111111
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'0000011111111111'.

3.25.15. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$429 using $paramod\$lut\WIDTH=4\LUT=16'0000011111111111.

3.25.16. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 4
Parameter \LUT = 16'0000000011111000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=4\LUT=16'0000000011111000'.

3.25.17. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$434 using $paramod\$lut\WIDTH=4\LUT=16'0000000011111000.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$437 using $paramod\$lut\WIDTH=4\LUT=16'1111100000000000.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$439 using $paramod\$lut\WIDTH=1\LUT=2'01.

3.25.18. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'1110
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'1110'.

3.25.19. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$428 using $paramod\$lut\WIDTH=2\LUT=4'1110.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$433 using $paramod\$lut\WIDTH=4\LUT=16'1111100000000000.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$445 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$446 using $paramod\$lut\WIDTH=1\LUT=2'01.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$447 using $paramod\$lut\WIDTH=1\LUT=2'01.

3.25.20. Executing AST frontend in derive mode using pre-parsed AST for module `\$lut'.
Parameter \WIDTH = 2
Parameter \LUT = 4'1000
Generating RTLIL representation for module `$paramod\$lut\WIDTH=2\LUT=4'1000'.

3.25.21. Continuing TECHMAP pass.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$449 using $paramod\$lut\WIDTH=2\LUT=4'1000.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$450 using $paramod\$lut\WIDTH=2\LUT=4'0100.
Mapping top.$abc$426$auto$blifparse.cc:375:parse_blif$438 using $paramod\$lut\WIDTH=4\LUT=16'1111100000000000.
No more expansions possible.
Removed 0 unused cells and 46 unused wires.

3.26. Executing HIERARCHY pass (managing design hierarchy).

3.26.1. Analyzing design hierarchy..
Top module:  \top

3.26.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

3.27. Printing statistics.

=== top ===

   Number of wires:                 62
   Number of wire bits:             95
   Number of public wires:          27
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 60
     SB_CARRY                       16
     SB_DFFE                         1
     SB_DFFESR                       2
     SB_DFFSR                       10
     SB_LUT4                        31

3.28. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

3.29. Executing BLIF backend.

End of script. Logfile hash: 7fb468d7ae
CPU: user 0.24s system 0.01s, MEM: 62.12 MB total, 33.09 MB resident
Yosys 0.7 (git sha1 UNKNOWN, gcc 8.0.1 -fPIC -Os)
Time spent: 36% 10x read_verilog (0 sec), 10% 1x share (0 sec), ...
arachne-pnr -d 8k -o dotmatrix.asc -p hx8kboard.pcf dotmatrix.blif
icetime -d hx8k -mtr dotmatrix.rpt dotmatrix.asc
// Reading input .asc file..
// Reading 8k chipdb file..
// Creating timing netlist..
// Timing estimate: 7.44 ns (134.48 MHz)
icepack dotmatrix.asc dotmatrix.bin
